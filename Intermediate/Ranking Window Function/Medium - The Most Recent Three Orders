Problem Statement:
Write a query to find the most recent three orders of each user. If a user ordered three or less than three orders, return all of their orders.

Result:
Return the result table ordered by customer_name in ascending order and in case of a tie by the customer_id in ascending order. 
If there is still a tie, order them by order_date in descending order.
-- Reflects problem-solving techniques from Scalerâ€™s coursework.

customers                                    orders
customer_id | name                           order_id | order_date  | customer_id | cost
------------|-------------------          ------------|------------|-------------|------
1           | Winston                      1          | 2020-07-31 | 1           | 30
2           | Jonathan                     2          | 2020-07-30 | 2           | 40
3           | Annabelle                    3          | 2020-07-31 | 3           | 70
4           | Marwan                       4          | 2020-07-29 | 4           | 100
5           | Khaled                       5          | 2020-06-10 | 1           | 1010
                                           6          | 2020-08-01 | 2           | 102
                                           7          | 2020-08-01 | 3           | 111
                                           8          | 2020-08-03 | 1           | 99
                                           9          | 2020-08-07 | 2           | 32
                                          10          | 2020-07-15 | 1           | 2
Explanation:
-We will return the data by ascending order of name
-We will start with Annabelle, she has only 2 orders, we return them.
-Jonathan has exactly 3 orders.
-Marwan ordered only one time.
-Winston has 4 orders, we discard the order of "2020-06-10" because it is the oldest order.

Approach : 
- Select clause line specifies the columns that will be selected and returned in the result set.
- This subquery selects the name column from the customers table (aliased as c), the customer_id column from the customers table (also aliased as c), the order_id column from the orders table (aliased as o).
- calculates the rank of each row within each partition of customer_id, ordered by order_date in descending order.
- joins the two tables based on the common customer_id column.
- WHERE clause filters the result set to include only rows where the rank (rnk) is less than or equal to 3. This means it will select the top 3 orders (based on order_date) for each customer.
- Order clause will first sort the result set by customer_name in ascending order, then by customer_id in ascending order, and finally by order_date in descending order.

Solution : 

SELECT name AS customer_name , customer_id, order_id, order_date
FROM 
(SELECT o.customer_id, order_id, order_date, name, cost ,
         ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date DESC) AS rnk 
FROM customers c 
JOIN orders o
ON c.customer_id = o.customer_id) xwin
WHERE rnk <= 3 
ORDER BY customer_name, customer_id, order_date DESC;

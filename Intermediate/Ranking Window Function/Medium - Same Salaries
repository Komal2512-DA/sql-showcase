Problem Description:
A company wants to divide the employees into teams such that all the members of each team have the same salary. The teams should follow these criteria:
-Each team should consist of at least two employees.
-All the employees on a team should have the same salary.
-All the employees with the same salary should be assigned to the same team.
-If an employee's salary is unique, we do not assign this employee to any team.
-A team's ID is assigned based on the rank of the team's salary relative to the other teams' salaries, where the team with the lowest salary has team_id = 1.
Note that the salaries for employees not on a team are not included in this ranking.
-Write a query to get the team_id of each employee that is in a team.
Result:
-Return the result table ordered by team_id in ascending order. In case of a tie, order it by employee_id in ascending order.
-- Picked this one up from Scalerâ€™s learning platform.

employee                                                     Output : 
employee_id | name    | salary                              employee_id | name    | salary | team_id
------------|---------|--------                             ------------|---------|--------|--------
1           | Andrew  | 5000                                1           | Andrew  | 5000   | 1
2           | Erin    | 5000                                2           | Erin    | 5000   | 1
3           | Stanley | 4700                                4           | Jim     | 8000   | 2
4           | Jim     | 8000                                5           | Oscar   | 8000   | 2
5           | Oscar   | 8000                                

Solution : 

SELECT employee_id , name , salary , 
    DENSE_RANK() OVER (ORDER BY salary) AS team_id
FROM
(SELECT * , COUNT(name) OVER (PARTITION BY salary) AS user_count
FROM employees ) x
WHERE user_count > 1 
ORDER BY team_id , employee_id;

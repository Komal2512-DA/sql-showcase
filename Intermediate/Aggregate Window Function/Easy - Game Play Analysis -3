Problem Statement:
Write a query to report for each player and date, how many games have been played so far by the player. That is, the total number of games played by the player until that date.

Result:
-Return the columns 'player_id', 'date', and 'games_played_so_far'
-Return the result table ordered by player_id and games_played_so_far in ascending order.
-- I came across a similar problem on Scaler!

acitivity                                                                     Output 
player_id | device_id | event_date | games_played                             player_id | event_date | games_played_so_far
----------|-----------|------------|--------------                            ----------|------------|--------------------
1         | 2         | 2016-03-01 | 5                                        1         | 2016-03-01 | 5
1         | 2         | 2016-05-02 | 6                                        1         | 2016-05-02 | 11
1         | 3         | 2017-06-25 | 1                                        1         | 2017-06-25 | 12
3         | 1         | 2016-03-02 | 0                                        3         | 2016-03-02 | 0
3         | 4         | 2018-07-03 | 5                                        3         | 2018-07-03 | 5


Approach : 
- SELECT statement that retrieves the “player_id” and “event_date” columns from the “activity” table.
- Window function that calculates the cumulative sum of “games_played” so far for each player. The PARTITION BY clause partitions the data by “player_id”, and the ORDER BY clause orders the data within each partition by “event_date”.
- To sort the result set first by “player_id” and then by “games_played_so_far” in ascending order.

Solution : 

SELECT player_id , event_date , SUM(games_played) OVER ( PARTITION BY player_id ORDER BY event_date) AS games_played_so_far
FROM activity
ORDER BY player_id, games_played_so_far;

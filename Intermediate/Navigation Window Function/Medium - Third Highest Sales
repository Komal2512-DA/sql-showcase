Problem Description:
Write a query to compare each sale of a customer with 3rd highest sale of that customer.

Result:
-Return the columns customerNumber, orderNumber, productCode, sales, and thirdHighestSales.
-Order the output by customerNumber in ascending order and by sales in descending order.
-- This challenge echoes a problem taught at Scaler.

|   orders       |              |                  |                |                   |            |                  |       |   orderdetails |                |                    |             |                    |       |     Sample Output  |                |                |           |                     |
| -------------- | ------------ | ---------------- | -------------- | ----------------- | ---------- | ---------------- | ----- | -------------- | -------------- | ------------------ | ----------- | ------------------ | ----- | ------------------ | -------------- | -------------- | --------- | ------------------- |
| orderNumber    | orderDate    | requiredDate     | shippedDate    | status            | comments   | customerNumber   |       | orderNumber    | productCode    | quantityOrdered    | priceEach   | orderLineNumber    |       | customerNumber     | orderNumber    | productCode    | sales     | thirdHighestSales   |
| -------------- | ------------ | ---------------  | -------------- | ---------         | ---------- | ---------------- | ----- | -------------- | -------------- | ------------------ | ----------- | ------------------ | ----- | ------------------ | -------------- | -------------- | --------- | ------------------- |
| 10123          | 2003-05-20   | 2003-05-29       | 2003-05-22     | Shipped           | NULL       | 103              |       | 10123          | S18_1589       | 26                 | 120.71      | 2                  |       | 103                | 10123          | S18_2870       | 5282.64   | 3986.84             |
| 10298          | 2004-09-27   | 2004-10-05       | 2004-10-01     | Shipped           | NULL       | 103              |       | 10123          | S18_2870       | 46                 | 114.84      | 3                  |       | 103                | 10298          | S10_2016       | 4128.54   | 3986.84             |
| 10345          | 2004-11-25   | 2004-12-01       | 2004-11-26     | Shipped           | NULL       | 103              |       | 10123          | S18_3685       | 34                 | 117.26      | 4                  |       | 103                | 10123          | S18_3685       | 3986.84   | 3986.84             |
|                |              | 10123            | S24_1628       | 50                | 43.27      | 6                |       | 103            | 10123          | S18_1589           | 3138.46     | 3986.84            |       |                    |                |                |           |                     |
|                |              | 10298            | S10_2016       | 39                | 105.86     | 1                |       | 103            | 10123          | S24_1628           | 2163.50     | 3986.84            |       |                    |                |                |           |                     |
|                |              | 10298            | S18_2625       | 32                | 60.57      | 2                |       | 103            | 10298          | S18_2625           | 1938.24     | 3986.84            |       |                    |                |                |           |                     |
|                |              | 10345            | S24_2022       | 43                | 38.98      | 1                |       | 103            | 10345          | S24_2022           | 1676.14     | 3986.84            |       |                    |                |                |           |                     |

Approach :
- Columns selected are o.customerNumber, o.orderNumber, od.productCode, calculate sales amount (od.quantityOrdered * od.priceEach), and the third highest sales amount using SELECT clause.
- Join the "orders" table (aliased as 'o') with the "orderdetails" table (aliased as 'od') based on the common column o.orderNumber = od.orderNumber.
- Apply the NTH_VALUE function over the partition defined by o.customerNumber and Use the clause The ROW BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING so it ensures that the calculation considers all rows within the partition.
- The result set is sorted in ascending order by customerNumber and in descending order by the sales column.

Solution : 
SELECT customerNumber, o.orderNumber, productCode, priceEach * quantityOrdered AS sales, 
    NTH_VALUE(priceEach * quantityOrdered, 3) OVER (PARTITION BY customerNumber ORDER BY priceEach * quantityOrdered DESC 
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS thirdHighestSales
FROM orders o 
JOIN orderdetails od 
ON o.orderNumber = od.orderNumber
ORDER BY customerNumber , sales DESC;
